
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Table: public.courses

-- DROP TABLE IF EXISTS public.courses;

CREATE TABLE IF NOT EXISTS public.faculties (
	id serial NOT NULL,
	english_name character varying(150) NOT NULL,
	hebrew_name character varying(150) NOT NULL,
	CONSTRAINT faculty_id_constraint PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.departments (
	id serial NOT NULL,
	english_name character varying(150) NOT NULL,
	hebrew_name character varying(150) NOT NULL,
	faculty_id int NOT NULL,
	FOREIGN KEY (faculty_id) REFERENCES public.faculties(id),
	CONSTRAINT department_id_constraint PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.courses (
	id character VARYING(20) PRIMARY KEY,
	name character varying(150)
);

CREATE TABLE IF NOT EXISTS public.courses_in_departments (
	course_id character VARYING(20) NOT NULL,
	department_id int NOT NULL,
	CONSTRAINT double_pkey PRIMARY KEY (course_id, department_id),
	FOREIGN KEY (course_id) REFERENCES public.courses(id),
	FOREIGN KEY (department_id) REFERENCES public.departments(id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.courses
    OWNER to postgres;

CREATE SEQUENCE course_discussions_id_seq;

-- Table: public.course_discussions

-- DROP TABLE IF EXISTS public.course_discussions;

CREATE TABLE IF NOT EXISTS public.course_discussions
(
    id integer NOT NULL DEFAULT nextval('course_discussions_id_seq'::regclass),
    uid integer NOT NULL,
    cid character(15) NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    body text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    CONSTRAINT course_discussions_pkey PRIMARY KEY (id),
    CONSTRAINT course_discussions_cid_fkey FOREIGN KEY (cid)
        REFERENCES public.courses (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.course_discussions
    OWNER to postgres;

-- Trigger: set_timestamp

-- DROP TRIGGER IF EXISTS set_timestamp ON public.course_discussions;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE 
    ON public.course_discussions
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_timestamp();
	


CREATE SEQUENCE course_comments_id_seq;

-- Table: public.course_comments

-- DROP TABLE IF EXISTS public.course_comments;

CREATE TABLE IF NOT EXISTS public.course_comments
(
    id integer NOT NULL DEFAULT nextval('course_comments_id_seq'::regclass),
    uid integer NOT NULL,
    did integer NOT NULL,
    cid character(15) NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    body text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    CONSTRAINT course_comments_pkey PRIMARY KEY (id),
    CONSTRAINT course_comments_did_fkey FOREIGN KEY (did)
        REFERENCES public.course_discussions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.course_comments
    OWNER to postgres;

-- Trigger: set_timestamp

-- DROP TRIGGER IF EXISTS set_timestamp ON public.course_comments;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE 
    ON public.course_comments
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_timestamp();

	
-- Table: public.questions

-- DROP TABLE IF EXISTS public.questions;

CREATE TABLE IF NOT EXISTS public.questions
(
    qnum smallint NOT NULL,
    tid integer NOT NULL,
    rate_score smallint DEFAULT 0,
    rate_amount smallint DEFAULT 0,
    CONSTRAINT questions_pkey PRIMARY KEY (tid, index)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.questions
    OWNER to postgres;


CREATE SEQUENCE question_discussions_id_seq;

-- Table: public.question_discussions

-- DROP TABLE IF EXISTS public.question_discussions;

CREATE TABLE IF NOT EXISTS public.question_discussions
(
    id integer NOT NULL DEFAULT nextval('question_discussions_id_seq'::regclass),
    uid integer NOT NULL,
    cid character(15) NOT NULL,
    tid integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    body text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    qnum integer,
    CONSTRAINT question_discussions_pkey PRIMARY KEY (id),
    CONSTRAINT question_discussions_tid_qnum_fkey FOREIGN KEY (qnum, tid)
        REFERENCES public.questions (qnum, tid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.question_discussions
    OWNER to postgres;

-- Trigger: set_timestamp

-- DROP TRIGGER IF EXISTS set_timestamp ON public.question_discussions;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE 
    ON public.question_discussions
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_timestamp();
	
	
CREATE SEQUENCE question_comments_id_seq;

-- Table: public.question_comments

-- DROP TABLE IF EXISTS public.question_comments;

CREATE TABLE IF NOT EXISTS public.question_comments
(
    id integer NOT NULL DEFAULT nextval('question_comments_id_seq'::regclass),
    uid integer NOT NULL,
    did integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    body text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    CONSTRAINT question_comments_pkey PRIMARY KEY (id),
    CONSTRAINT question_comments_did_fkey FOREIGN KEY (did)
        REFERENCES public.question_discussions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.question_comments
    OWNER to postgres;

-- Trigger: set_timestamp

-- DROP TRIGGER IF EXISTS set_timestamp ON public.question_comments;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE 
    ON public.question_comments
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_timestamp();
	




CREATE SEQUENCE tests_id_seq;

-- Table: public.tests

-- DROP TABLE IF EXISTS public.tests;

CREATE TABLE IF NOT EXISTS public.tests
(
    id integer NOT NULL DEFAULT nextval('tests_id_seq'::regclass),
    cid character(15) NOT NULL,
    year smallint NOT NULL,
    questions_num smallint NOT NULL,
    semester character(10) COLLATE pg_catalog."default" NOT NULL,
    period character(10) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tests_pkey PRIMARY KEY (id),
    CONSTRAINT tests_cid_fkey FOREIGN KEY (cid)
        REFERENCES public.courses (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tests
    OWNER to postgres;
	
CREATE SEQUENCE solution_id_seq;

-- Table: public.solutions

-- DROP TABLE IF EXISTS public.solutions;

CREATE TABLE IF NOT EXISTS public.solutions
(
    id integer NOT NULL DEFAULT nextval('solution_id_seq'::regclass),
    tid integer NOT NULL,
    cid character(15) NOT NULL,
    download_link text NOT NULL,
    CONSTRAINT solutions_pkey PRIMARY KEY (id),
    CONSTRAINT solutions_cid_fkey FOREIGN KEY (cid)
        REFERENCES public.courses (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)


TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.solutions
    OWNER to postgres;
	
CREATE SEQUENCE exam_id_seq;

-- Table: public.exams

-- DROP TABLE IF EXISTS public.exams;

CREATE TABLE IF NOT EXISTS public.exams
(
    id integer NOT NULL DEFAULT nextval('exam_id_seq'::regclass),
    tid integer NOT NULL,
    cid character(15) NOT NULL,
    download_link text NOT NULL,
    CONSTRAINT exams_pkey PRIMARY KEY (id),
    CONSTRAINT exams_cid_fkey FOREIGN KEY (cid)
        REFERENCES public.courses (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.tests
    OWNER to postgres;
	
	




CREATE SEQUENCE test_discussions_id_seq;
	
-- Table: public.test_discussions

-- DROP TABLE IF EXISTS public.test_discussions;

CREATE TABLE IF NOT EXISTS public.test_discussions
(
    id integer NOT NULL DEFAULT nextval('test_discussions_id_seq'::regclass),
    uid integer NOT NULL,
    cid character(15) NOT NULL,
    tid integer NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    body text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    CONSTRAINT test_discussions_pkey PRIMARY KEY (id),
    CONSTRAINT test_discussions_cid_fkey FOREIGN KEY (cid)
        REFERENCES public.courses (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT test_discussions_tid_fkey FOREIGN KEY (tid)
        REFERENCES public.tests (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.test_discussions
    OWNER to postgres;

-- Trigger: set_timestamp

-- DROP TRIGGER IF EXISTS set_timestamp ON public.test_discussions;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE 
    ON public.test_discussions
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_timestamp();
	



CREATE SEQUENCE test_comments_id_seq;

-- Table: public.test_comments

-- DROP TABLE IF EXISTS public.test_comments;

CREATE TABLE IF NOT EXISTS public.test_comments
(
    id integer NOT NULL DEFAULT nextval('test_comments_id_seq'::regclass),
    uid integer NOT NULL,
    did integer NOT NULL,
    tid integer NOT NULL,
    cid character(15) NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    body text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    CONSTRAINT test_comments_pkey PRIMARY KEY (id),
    CONSTRAINT test_comments_did_fkey FOREIGN KEY (did)
        REFERENCES public.test_discussions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.test_comments
    OWNER to postgres;

-- Trigger: set_timestamp

-- DROP TRIGGER IF EXISTS set_timestamp ON public.test_comments;

CREATE TRIGGER set_timestamp
    BEFORE UPDATE 
    ON public.test_comments
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_timestamp();
	


CREATE SEQUENCE users_id_seq;

-- Table: public.users

-- DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;
	

	
-- Table: public.user_courses

-- DROP TABLE IF EXISTS public.user_courses;

CREATE TABLE IF NOT EXISTS public.user_courses
(
    uid integer NOT NULL,
    cid character VARYING(20) NOT NULL,
    CONSTRAINT user_courses_pkey PRIMARY KEY (uid, cid),
    CONSTRAINT user_courses_cid_fkey FOREIGN KEY (cid)
        REFERENCES public.courses (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT user_courses_uid_fkey FOREIGN KEY (uid)
        REFERENCES public.users (id) 
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)


TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_courses
    OWNER to postgres;


-- Table: public.questions_user_rate

-- DROP TABLE IF EXISTS public.questions_user_rate;

CREATE TABLE IF NOT EXISTS public.questions_user_rate
(
    qnum smallint NOT NULL,
    tid integer NOT NULL,
    uid integer NOT NULL,
    personal_rate smallint DEFAULT 0,
    CONSTRAINT questions_user_rate_pkey PRIMARY KEY (tid, qnum, uid),
    CONSTRAINT questions_user_rate_qnum_tid_fkey FOREIGN KEY (qnum, tid)
        REFERENCES public.questions (qnum, tid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT questions_user_rate_uid_fkey FOREIGN KEY (uid)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.questions_user_rate
    OWNER to postgres;
	
	
