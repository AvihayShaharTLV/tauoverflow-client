{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avikef\\\\Desktop\\\\New folder (10)\\\\src\\\\pages\\\\question-page\\\\QuestionPage.js\",\n    _s = $RefreshSig$();\n\nimport CourseHeader from \"../../components/course-header/CourseHeader\";\nimport Discussions from '../../components/discussions/Discussions';\nimport { useParams } from \"react-router\";\nimport { useState, useEffect } from \"react\";\nimport { getAllTests } from \"../../API/testApi\";\nimport { getAllCourses } from '../../API/courseApi';\nimport { getQuestionUserRate, createQuestionUserRate } from '../../API/questionApi';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionPage = _ref => {\n  _s();\n\n  let {\n    setIsPopupOpen,\n    isPopupOpen,\n    setPopupType,\n    contentUpdated\n  } = _ref;\n  const {\n    user,\n    isLoading\n  } = useAuth0();\n  const [courseName, setCourseName] = useState('');\n  const [examDefenition, setExamDefenition] = useState('');\n  const [userRate, setUserRate] = useState(null);\n  const [hasUserVoted, setHasUserVoted] = useState(false);\n  const [avgVote, setAvgVote] = useState(0);\n  const IDs = useParams();\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!isLoading && user) {\n          const userVotes = await getQuestionUserRate();\n          if (userVotes.data.data.allQuestionsUserRates.nodes.length > 0) calculateAvgRating(userVotes.data.data.allQuestionsUserRates.nodes);\n          userVotes.data.data.allQuestionsUserRates.nodes.forEach(vote => {\n            if (vote.uid === user.sub.split(\"|\")[1] && vote.qnum === parseInt(IDs.questionID) && vote.tid === parseInt(IDs.examID)) {\n              setUserRate(parseInt(vote.personalRate));\n              setHasUserVoted(true);\n            }\n          });\n        }\n\n        ;\n        const response = await getAllCourses();\n        const allCourses = response.data.data.allCourses.nodes;\n        allCourses.forEach(course => {\n          if (course.id === IDs.courseID) {\n            setCourseName(course.name);\n          }\n        });\n        const tests = await getAllTests();\n        tests.data.data.allTests.nodes.forEach(test => {\n          if (test.cid.trim() === IDs.courseID && test.id === parseInt(IDs.examID)) {\n            setExamDefenition({\n              \"year\": test.year,\n              \"period\": test.period,\n              \"semester\": test.semester\n            });\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [isLoading]);\n\n  const calculateAvgRating = list => {\n    const newList = list.filter(item => item.qnum === parseInt(IDs.questionID) && item.tid === parseInt(IDs.examID));\n    if (newList.length <= 0) return;\n    const avg = newList.reduce((a, b) => {\n      return a + b.personalRate;\n    }, 0) / newList.length;\n    setAvgVote(avg);\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!isLoading && user && !hasUserVoted) {\n          // user hasnt voted yet\n          // push hardness to db\n          const response = await createQuestionUserRate({\n            \"uid\": user.sub.split(\"|\")[1],\n            \"tid\": parseInt(IDs.examID),\n            \"personalRate\": parseInt(userRate),\n            \"qnum\": parseInt(IDs.questionID)\n          });\n\n          if (!response.data.errors) {\n            setHasUserVoted(true);\n            setUserRate(parseInt(userRate));\n            const userVotes = await getQuestionUserRate();\n            if (userVotes.data.data.allQuestionsUserRates.nodes.length > 0) calculateAvgRating(userVotes.data.data.allQuestionsUserRates.nodes);\n          }\n        } else {\n          // only update is needed\n          const userVotes = await getQuestionUserRate();\n          if (userVotes.data.data.allQuestionsUserRates.nodes.length > 0) calculateAvgRating(userVotes.data.data.allQuestionsUserRates.nodes);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [userRate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      dir: \"rtl\",\n      className: \"flex shadow rounded-lg p-5 dark:bg-gray-900 flex-col mx-auto my-10 items-center max-w-7xl\",\n      children: /*#__PURE__*/_jsxDEV(CourseHeader, {\n        avgVote: avgVote,\n        hasUserVoted: hasUserVoted,\n        userRate: userRate,\n        setUserRate: setUserRate,\n        setPopupType: setPopupType,\n        isPopupOpen: isPopupOpen,\n        setIsPopupOpen: setIsPopupOpen,\n        courseName: courseName,\n        examID: examDefenition,\n        questionNum: IDs.questionID,\n        discussionBTN: 'דיון חדש'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dir: \"rtl\",\n      className: \"max-w-7xl m-auto\",\n      children: /*#__PURE__*/_jsxDEV(Discussions, {\n        type: 'question',\n        contentUpdated: contentUpdated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuestionPage, \"IqhaQXpfWugWEexApXYUdxh7Za4=\", false, function () {\n  return [useAuth0, useParams];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["C:/Users/avikef/Desktop/New folder (10)/src/pages/question-page/QuestionPage.js"],"names":["CourseHeader","Discussions","useParams","useState","useEffect","getAllTests","getAllCourses","getQuestionUserRate","createQuestionUserRate","useAuth0","QuestionPage","setIsPopupOpen","isPopupOpen","setPopupType","contentUpdated","user","isLoading","courseName","setCourseName","examDefenition","setExamDefenition","userRate","setUserRate","hasUserVoted","setHasUserVoted","avgVote","setAvgVote","IDs","userVotes","data","allQuestionsUserRates","nodes","length","calculateAvgRating","forEach","vote","uid","sub","split","qnum","parseInt","questionID","tid","examID","personalRate","response","allCourses","course","id","courseID","name","tests","allTests","test","cid","trim","year","period","semester","error","console","log","list","newList","filter","item","avg","reduce","a","b","errors"],"mappings":"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","sourcesContent":["import CourseHeader from \"../../components/course-header/CourseHeader\";\nimport Discussions from '../../components/discussions/Discussions';\nimport { useParams } from \"react-router\";\nimport { useState, useEffect } from \"react\"\nimport { getAllTests } from \"../../API/testApi\";\nimport { getAllCourses } from '../../API/courseApi'\nimport { getQuestionUserRate, createQuestionUserRate } from '../../API/questionApi'\nimport { useAuth0 } from '@auth0/auth0-react'\n\nconst QuestionPage = ({ setIsPopupOpen, isPopupOpen, setPopupType, contentUpdated }) => {\n\n    const { user, isLoading } = useAuth0();\n    const [courseName, setCourseName] = useState('');\n    const [examDefenition, setExamDefenition] = useState('');\n    const [userRate, setUserRate] = useState(null);\n    const [hasUserVoted, setHasUserVoted] = useState(false);\n    const [avgVote, setAvgVote] = useState(0);\n    const IDs = useParams();\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (!isLoading && user) {\n                    const userVotes = await getQuestionUserRate();\n                    if (userVotes.data.data.allQuestionsUserRates.nodes.length > 0)\n                        calculateAvgRating(userVotes.data.data.allQuestionsUserRates.nodes);\n                    userVotes.data.data.allQuestionsUserRates.nodes.forEach(vote => {\n                        if (vote.uid === user.sub.split(\"|\")[1] && vote.qnum === parseInt(IDs.questionID) && vote.tid === parseInt(IDs.examID)) {\n                            setUserRate(parseInt(vote.personalRate));\n                            setHasUserVoted(true);\n                        }\n                    })\n                };\n                const response = await getAllCourses();\n                const allCourses = response.data.data.allCourses.nodes;\n                allCourses.forEach(course => {\n                    if (course.id === IDs.courseID) {\n                        setCourseName(course.name);\n                    }\n                });\n                const tests = await getAllTests();\n                tests.data.data.allTests.nodes.forEach(test => {\n                    if (test.cid.trim() === IDs.courseID && test.id === parseInt(IDs.examID)) {\n                        setExamDefenition({\n                            \"year\": test.year,\n                            \"period\": test.period,\n                            \"semester\": test.semester\n                        })\n                    }\n                })\n            }\n            catch (error) {\n                console.log(error);\n            }\n        })();\n    }, [isLoading])\n\n    const calculateAvgRating = (list) => {\n        const newList = list.filter(item => item.qnum === parseInt(IDs.questionID) && item.tid === parseInt(IDs.examID))\n        if (newList.length <= 0) return;\n        const avg = newList.reduce((a, b) => { return a + b.personalRate }, 0) / newList.length;\n        setAvgVote(avg);\n    }\n\n    useEffect(() => {\n        (async () => {\n            try {\n                if (!isLoading && user && !hasUserVoted) {\n                    // user hasnt voted yet\n                    // push hardness to db\n                    const response = await createQuestionUserRate({\n                        \"uid\": user.sub.split(\"|\")[1],\n                        \"tid\": parseInt(IDs.examID),\n                        \"personalRate\": parseInt(userRate),\n                        \"qnum\": parseInt(IDs.questionID),\n                    })\n                    if (!response.data.errors) {\n                        setHasUserVoted(true);\n                        setUserRate(parseInt(userRate));\n                        const userVotes = await getQuestionUserRate();\n                        if (userVotes.data.data.allQuestionsUserRates.nodes.length > 0)\n                            calculateAvgRating(userVotes.data.data.allQuestionsUserRates.nodes);\n                    }\n                }\n                else{\n                    // only update is needed\n                    const userVotes = await getQuestionUserRate();\n                        if (userVotes.data.data.allQuestionsUserRates.nodes.length > 0)\n                            calculateAvgRating(userVotes.data.data.allQuestionsUserRates.nodes);\n                }\n            }\n            catch (error) {\n                console.log(error);\n            }\n        })();\n    }, [userRate])\n\n    return (\n        <>\n            <div dir='rtl' className=\"flex shadow rounded-lg p-5 dark:bg-gray-900 flex-col mx-auto my-10 items-center max-w-7xl\">\n                <CourseHeader avgVote={avgVote} hasUserVoted={hasUserVoted} userRate={userRate} setUserRate={setUserRate} setPopupType={setPopupType} isPopupOpen={isPopupOpen} setIsPopupOpen={setIsPopupOpen} courseName={courseName} examID={examDefenition} questionNum={IDs.questionID} discussionBTN={'דיון חדש'} />\n            </div>\n            <div dir=\"rtl\" className=\"max-w-7xl m-auto\">\n                <Discussions type={'question'} contentUpdated={contentUpdated} />\n            </div>\n        </>\n    )\n}\nexport default QuestionPage"]},"metadata":{},"sourceType":"module"}