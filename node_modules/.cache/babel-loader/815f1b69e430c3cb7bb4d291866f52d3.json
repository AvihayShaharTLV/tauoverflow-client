{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avikef\\\\Desktop\\\\New folder (12)\\\\tauoverflow-client\\\\src\\\\modals\\\\popups\\\\PopupFileUploading.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Button from '../../general-components/Button';\nimport UploadFile from '../../general-components/UploadFile';\nimport GroupedDDLs from '../../components/grouped-ddls/GroupedDDLs';\nimport { createTest, createSolution, createExam } from '../../API/testApi';\nimport { uploadToS3 } from '../../s3-methods/uploadFile';\nimport { createQuestion } from '../../API/questionApi';\nimport { getAllTests } from '../../API/testApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PopupFileUploading = _ref => {\n  _s();\n\n  let {\n    examDefenition,\n    setNewExamUploaded,\n    newExamUploaded,\n    newSolutionUploaded,\n    setNewSolutionUploaded,\n    setTitle,\n    setIsPopupOpen,\n    popupType\n  } = _ref;\n  let params = window.location.href.split('/').slice(3);\n  let courseID, examID;\n  if (params[0]) courseID = params[0].split('=')[1];\n  if (params[1]) examID = params[1].split('=')[1];\n  examID ? setTitle('העלה קובץ') : setTitle('צור מבחן');\n\n  const findSemester = () => {\n    let month = new Date().getMonth() + 1;\n\n    switch (month) {\n      case 11:\n      case 12:\n      case 1:\n      case 2:\n        return 'א';\n\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n        return 'ב';\n\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n        return 'קיץ';\n\n      default:\n        break;\n    }\n  };\n\n  const [isBTNdisabled, setIsBTNdisabled] = useState(false); // file upload data\n\n  const [selectedFile, setSelectedFile] = useState(null); // ddls and inputs data\n\n  const [year, setYear] = useState(null);\n  const [semester, setSemester] = useState(null);\n  const [due, setDue] = useState(null);\n  const [maestro, setMaestro] = useState(null);\n  const [questionNum, setQuestionNum] = useState(1);\n  const [fileType, setFileType] = useState(null);\n  const [grade, setGrade] = useState(null);\n  const [language, setLanguage] = useState(null);\n  const FILE_LIMIT = 5000000;\n  useEffect(() => {\n    setYear(examID ? examDefenition.year : new Date().getFullYear());\n    setSemester(examID ? examDefenition.semester : findSemester());\n    setDue(examID ? examDefenition.period : null);\n  }, [examID]);\n\n  const handleFileInput = file => {\n    if (file.size > FILE_LIMIT) {\n      alert(\"file uploading is limited up to 5MB\");\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  const createTests = async () => {\n    // make sure all fields are filled\n    if (!(year && semester && due && questionNum)) {\n      alert(\"All fields must be filled\");\n      return;\n    } // get all stored tests\n\n\n    const tests = await getAllTests();\n\n    for (const test of tests.data.data.allTests.nodes) {\n      if (test.cid === courseID && test.year === year && test.period === due && test.semester === semester) {\n        // alert and navigate to test page\n        alert(\"המבחן כבר קיים, תועבר באופן אוטומטי\");\n        window.location.replace(`/course=${courseID.trim()}/exam=${test.id}`);\n        return;\n      }\n    } // if isnt a match => continue and create\n\n\n    const testID = await createTest({\n      \"cid\": courseID,\n      \"year\": parseInt(year),\n      \"questionsNum\": parseInt(questionNum),\n      \"semester\": semester,\n      \"period\": due\n    });\n\n    for (let i = 1; i <= parseInt(questionNum); i++) {\n      let question = await createQuestion({\n        \"tid\": parseInt(testID.data.data.createTest.test.id),\n        \"qnum\": i\n      });\n    }\n\n    if (testID.status === 200) {\n      window.location.replace(`/course=${courseID.trim()}/exam=${testID.data.data.createTest.test.id}`); // setIsBTNdisabled(false);\n\n      setIsPopupOpen(false);\n    } else if (testID.status === 400) {\n      alert('הקובץ לא הועלה כשורה. אנא נסה שוב.'); // setIsBTNdisabled(false);\n    }\n  };\n\n  const uploadFile = async () => {\n    // setIsBTNdisabled(true);\n    // make sure all fields are filled\n    if (!(year && semester && due && courseID && selectedFile && fileType)) {\n      alert(\"All fields must be filled\");\n      return;\n    } // push exam info with download link\n\n\n    let response; // if type is solution or exam, this means a test is already created. Just upload the specific file\n\n    if (parseInt(fileType) === 0) {\n      console.log('uploading a solution');\n      response = await createSolution({\n        \"cid\": courseID,\n        \"downloadLink\": await uploadToS3(selectedFile, 'solution'),\n        \"tid\": parseInt(examID),\n        \"grade\": parseInt(grade)\n      });\n      setNewSolutionUploaded(!newSolutionUploaded);\n    } else if (parseInt(fileType) === 1) {\n      console.log('uploading an exam');\n      response = await createExam({\n        \"cid\": courseID,\n        \"downloadLink\": await uploadToS3(selectedFile, 'exam'),\n        \"tid\": parseInt(examID),\n        \"language\": language\n      });\n      setNewExamUploaded(!newExamUploaded);\n    }\n\n    if (response.status === 200) {\n      // setIsBTNdisabled(false);\n      // fetch the solutions and tests \n      // rerender them\n      setIsPopupOpen(false);\n    } else if (response.status === 400) {\n      alert('הקובץ לא הועלה כשורה. אנא נסה שוב.');\n      setIsBTNdisabled(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(GroupedDDLs, {\n      examDefenition: examDefenition,\n      grade: grade,\n      questionNum: questionNum,\n      isQuestionNum: examID,\n      language: language,\n      setLanguage: setLanguage,\n      setGrade: setGrade,\n      fileType: fileType,\n      setFileType: setFileType,\n      setYear: setYear,\n      year: year,\n      setSemester: setSemester,\n      semester: semester,\n      setDue: setDue,\n      due: due,\n      setMaestro: setMaestro,\n      setQuestionNum: setQuestionNum,\n      upload: true,\n      popupType: popupType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), examID && /*#__PURE__*/_jsxDEV(UploadFile, {\n      uploadTitle: \"העלה קובץ\",\n      uploadFileLimit: FILE_LIMIT,\n      uploadType: \"PDF\",\n      handleFileInput: handleFileInput,\n      setSelectedFile: setSelectedFile,\n      selectedFile: selectedFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"\\u05D0\\u05D9\\u05E9\\u05D5\\u05E8\",\n      clickHandler: examID ? uploadFile : createTests,\n      disabled: isBTNdisabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PopupFileUploading, \"NzCDg926qSxkjWwxyLXqxPCSUKA=\");\n\n_c = PopupFileUploading;\nexport default PopupFileUploading;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupFileUploading\");","map":{"version":3,"sources":["C:/Users/avikef/Desktop/New folder (12)/tauoverflow-client/src/modals/popups/PopupFileUploading.js"],"names":["useEffect","useState","Button","UploadFile","GroupedDDLs","createTest","createSolution","createExam","uploadToS3","createQuestion","getAllTests","PopupFileUploading","examDefenition","setNewExamUploaded","newExamUploaded","newSolutionUploaded","setNewSolutionUploaded","setTitle","setIsPopupOpen","popupType","params","window","location","href","split","slice","courseID","examID","findSemester","month","Date","getMonth","isBTNdisabled","setIsBTNdisabled","selectedFile","setSelectedFile","year","setYear","semester","setSemester","due","setDue","maestro","setMaestro","questionNum","setQuestionNum","fileType","setFileType","grade","setGrade","language","setLanguage","FILE_LIMIT","getFullYear","period","handleFileInput","file","size","alert","createTests","tests","test","data","allTests","nodes","cid","replace","trim","id","testID","parseInt","i","question","status","uploadFile","response","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Button from '../../general-components/Button';\r\nimport UploadFile from '../../general-components/UploadFile';\r\nimport GroupedDDLs from '../../components/grouped-ddls/GroupedDDLs';\r\nimport { createTest, createSolution, createExam } from '../../API/testApi';\r\nimport { uploadToS3 } from '../../s3-methods/uploadFile';\r\nimport { createQuestion } from '../../API/questionApi';\r\nimport { getAllTests } from '../../API/testApi';\r\n\r\nconst PopupFileUploading = ({ examDefenition, setNewExamUploaded, newExamUploaded, newSolutionUploaded, setNewSolutionUploaded, setTitle, setIsPopupOpen, popupType }) => {\r\n\r\n    let params = window.location.href.split('/').slice(3);\r\n    let courseID, examID;\r\n    if (params[0]) courseID = params[0].split('=')[1];\r\n    if (params[1]) examID = params[1].split('=')[1];\r\n\r\n    examID ? setTitle('העלה קובץ') : setTitle('צור מבחן');\r\n\r\n    const findSemester = () => {\r\n        let month = new Date().getMonth() + 1;\r\n        switch (month) {\r\n            case 11: case 12: case 1: case 2:\r\n                return 'א';\r\n            case 3: case 4: case 5: case 6:\r\n                return 'ב';\r\n            case 7: case 8: case 9: case 10:\r\n                return 'קיץ';\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const [isBTNdisabled, setIsBTNdisabled] = useState(false);\r\n\r\n    // file upload data\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    // ddls and inputs data\r\n    const [year, setYear] = useState(null);\r\n    const [semester, setSemester] = useState(null);\r\n    const [due, setDue] = useState(null);\r\n    const [maestro, setMaestro] = useState(null);\r\n    const [questionNum, setQuestionNum] = useState(1);\r\n    const [fileType, setFileType] = useState(null);\r\n    const [grade, setGrade] = useState(null);\r\n    const [language, setLanguage] = useState(null);\r\n    const FILE_LIMIT = 5000000;\r\n\r\n    useEffect(()=>{\r\n        setYear(examID ? examDefenition.year : new Date().getFullYear())\r\n        setSemester(examID ? examDefenition.semester : findSemester())\r\n        setDue(examID ? examDefenition.period : null)\r\n    },[examID])\r\n\r\n    const handleFileInput = (file) => {\r\n        if (file.size > FILE_LIMIT) {\r\n            alert(\"file uploading is limited up to 5MB\");\r\n            return;\r\n        }\r\n        setSelectedFile(file);\r\n    }\r\n\r\n    const createTests = async () => {\r\n\r\n        // make sure all fields are filled\r\n        if (!(year && semester && due && questionNum)) {\r\n            alert(\"All fields must be filled\");\r\n            return;\r\n        }\r\n\r\n        // get all stored tests\r\n        const tests = await getAllTests();\r\n        for (const test of tests.data.data.allTests.nodes) {\r\n            if(test.cid === courseID && test.year === year && test.period === due && test.semester === semester){\r\n                // alert and navigate to test page\r\n                alert(\"המבחן כבר קיים, תועבר באופן אוטומטי\")\r\n                window.location.replace(`/course=${courseID.trim()}/exam=${test.id}`);\r\n                return;\r\n            }\r\n        }\r\n       \r\n        \r\n        // if isnt a match => continue and create\r\n        const testID = await createTest({\r\n            \"cid\": courseID,\r\n            \"year\": parseInt(year),\r\n            \"questionsNum\": parseInt(questionNum),\r\n            \"semester\": semester,\r\n            \"period\": due,\r\n        })\r\n        for (let i = 1; i <= parseInt(questionNum); i++) {\r\n            let question = await createQuestion({\r\n                \"tid\": parseInt(testID.data.data.createTest.test.id),\r\n                \"qnum\": i,\r\n            })\r\n        }\r\n        if (testID.status === 200) {\r\n            window.location.replace(`/course=${courseID.trim()}/exam=${testID.data.data.createTest.test.id}`);\r\n\r\n            // setIsBTNdisabled(false);\r\n            setIsPopupOpen(false);\r\n        }\r\n        else if (testID.status === 400) {\r\n            alert('הקובץ לא הועלה כשורה. אנא נסה שוב.')\r\n            // setIsBTNdisabled(false);\r\n        }\r\n    }\r\n\r\n    const uploadFile = async () => {\r\n        // setIsBTNdisabled(true);\r\n        // make sure all fields are filled\r\n        if (!(year && semester && due && courseID && selectedFile && fileType)) {\r\n            alert(\"All fields must be filled\");\r\n            return;\r\n        }\r\n\r\n        // push exam info with download link\r\n        let response;\r\n        // if type is solution or exam, this means a test is already created. Just upload the specific file\r\n        if (parseInt(fileType) === 0) {\r\n            console.log('uploading a solution');\r\n            response = await createSolution({\r\n                \"cid\": courseID,\r\n                \"downloadLink\": await uploadToS3(selectedFile, 'solution'),\r\n                \"tid\": parseInt(examID),\r\n                \"grade\": parseInt(grade),\r\n            })\r\n            setNewSolutionUploaded(!newSolutionUploaded);\r\n        }\r\n        else if (parseInt(fileType) === 1) {\r\n            console.log('uploading an exam');\r\n            response = await createExam({\r\n                \"cid\": courseID,\r\n                \"downloadLink\": await uploadToS3(selectedFile, 'exam'),\r\n                \"tid\": parseInt(examID),\r\n                \"language\": language,\r\n            })\r\n            setNewExamUploaded(!newExamUploaded);\r\n        }\r\n        if (response.status === 200) {\r\n            // setIsBTNdisabled(false);\r\n            // fetch the solutions and tests \r\n            // rerender them\r\n            setIsPopupOpen(false);\r\n        }\r\n        else if (response.status === 400) {\r\n            alert('הקובץ לא הועלה כשורה. אנא נסה שוב.')\r\n            setIsBTNdisabled(false);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center\">\r\n            <GroupedDDLs examDefenition={examDefenition} grade={grade} questionNum={questionNum} isQuestionNum={examID} language={language} setLanguage={setLanguage} setGrade={setGrade} fileType={fileType} setFileType={setFileType} setYear={setYear} year={year} setSemester={setSemester} semester={semester} setDue={setDue} due={due} setMaestro={setMaestro} setQuestionNum={setQuestionNum} upload={true} popupType={popupType} />\r\n            {examID && <UploadFile uploadTitle={\"העלה קובץ\"} uploadFileLimit={FILE_LIMIT} uploadType={\"PDF\"} handleFileInput={handleFileInput} setSelectedFile={setSelectedFile} selectedFile={selectedFile} />}\r\n            <Button text=\"אישור\" clickHandler={examID ? uploadFile : createTests} disabled={isBTNdisabled} />\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default PopupFileUploading\r\n"]},"metadata":{},"sourceType":"module"}