{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avikef\\\\Desktop\\\\New folder (10)\\\\src\\\\modals\\\\popups\\\\PopupDiscussion.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Input from '../../general-components/Input';\nimport Button from '../../general-components/Button';\nimport TextArea from '../../general-components/TextArea';\nimport { createCourseDiscussion } from '../../API/discussionApi';\nimport { createTestDiscussion } from '../../API/discussionApi';\nimport { createQuestionDiscussion } from \"../../API/questionApi\";\nimport userEvent from '@testing-library/user-event';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport UploadFile from '../../general-components/UploadFile';\nimport { uploadToS3 } from '../../s3-methods/uploadFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PopupDiscussion = _ref => {\n  _s();\n\n  let {\n    setTitle,\n    setIsPopupOpen,\n    setContentUpdated,\n    contentUpdated\n  } = _ref;\n  const {\n    user\n  } = useAuth0();\n  let params = window.location.href.split('/').slice(3);\n  let courseID, examID, questionNum;\n  if (params[0]) courseID = params[0].split('=')[1];\n  if (params[1]) examID = params[1].split('=')[1];\n  if (params[2]) questionNum = params[2].split('=')[1];\n  const [inputTitle, setInputTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [isBTNdisabled, setIsBTNdisabled] = useState(false); // file uploading code\n\n  const FILE_LIMIT = 500000;\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleFileInput = file => {\n    if (file.size > 5000000) {\n      alert(\"file uploading is limited up to 5MB\");\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  setTitle(\"צור דיון חדש\");\n\n  const postDiscussion = async e => {\n    // check if there is a attachment && upload it to S3 \n    let attachment = \"\";\n\n    if (selectedFile) {\n      console.log(\"uploading to s3 disc\", selectedFile);\n      attachment = await uploadToS3(selectedFile, 'image');\n    } // setIsBTNdisabled(true);\n\n\n    console.log(\"post\");\n    console.log(inputTitle); // if the title is empty, don't let the user commit the discussion!\n\n    if (inputTitle.trim().length <= 0) {\n      alert(\"Discussion must have a title\");\n      setIsBTNdisabled(false);\n      return;\n    } // check what type of discussion the user wants to post {course, exam, question}\n\n\n    let response;\n\n    if (questionNum) {\n      console.log('pushing a discussion to questions');\n      let object = {\n        \"attachment\": attachment ? attachment : null,\n        \"body\": description.trim(),\n        \"qnum\": parseInt(questionNum),\n        \"tid\": parseInt(examID),\n        \"title\": inputTitle.trim(),\n        \"uid\": user.sub.split(\"|\")[1]\n      };\n      console.log(object);\n      response = await createQuestionDiscussion(object);\n      console.log(response);\n    } else if (examID) {\n      console.log('pushing a discussion to exams');\n      response = await createTestDiscussion({\n        \"uid\": user.sub.split(\"|\")[1],\n        \"cid\": courseID,\n        \"tid\": parseInt(examID),\n        \"title\": inputTitle.trim(),\n        \"body\": description.trim(),\n        \"attachment\": attachment ? attachment : null\n      });\n    } else {\n      console.log('pushing a discussion to courses'); // console.log('courseID=',courseID);\n\n      response = await createCourseDiscussion({\n        \"uid\": user.sub.split(\"|\")[1],\n        \"cid\": courseID,\n        \"title\": inputTitle.trim(),\n        \"body\": description.trim(),\n        \"attachment\": attachment ? attachment : null\n      });\n    }\n\n    if (response.status === 200) {\n      setIsPopupOpen(false);\n      setContentUpdated(!contentUpdated);\n    } else {\n      alert('קרתה תקלה. אנא נסה בשנית');\n    }\n\n    setIsBTNdisabled(false); // console.log(response);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-between flex-col \",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      setInputValue: setInputTitle,\n      text: \"כותרת\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n      setDescription: setDescription,\n      text: \"תיאור\",\n      rows: 6\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UploadFile, {\n      uploadTitle: \"צרף תמונה\",\n      uploadFileLimit: FILE_LIMIT,\n      uploadType: \"PNG\",\n      handleFileInput: handleFileInput,\n      setSelectedFile: setSelectedFile,\n      selectedFile: selectedFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      clickHandler: postDiscussion,\n      text: \"אישור\",\n      disabled: isBTNdisabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PopupDiscussion, \"kogKw+h7qjXqLrdswSfo5WEYt7Y=\", false, function () {\n  return [useAuth0];\n});\n\n_c = PopupDiscussion;\nexport default PopupDiscussion;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopupDiscussion\");","map":{"version":3,"sources":["C:/Users/avikef/Desktop/New folder (10)/src/modals/popups/PopupDiscussion.js"],"names":["useState","useEffect","Input","Button","TextArea","createCourseDiscussion","createTestDiscussion","createQuestionDiscussion","userEvent","useAuth0","UploadFile","uploadToS3","PopupDiscussion","setTitle","setIsPopupOpen","setContentUpdated","contentUpdated","user","params","window","location","href","split","slice","courseID","examID","questionNum","inputTitle","setInputTitle","description","setDescription","isBTNdisabled","setIsBTNdisabled","FILE_LIMIT","selectedFile","setSelectedFile","handleFileInput","file","size","alert","postDiscussion","e","attachment","console","log","trim","length","response","object","parseInt","sub","status"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,SAASC,sBAAT,QAAuC,yBAAvC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,wBAAT,QAAyC,uBAAzC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,SAASC,UAAT,QAA2B,6BAA3B;;;AAEA,MAAMC,eAAe,GAAG,QAAqE;AAAA;;AAAA,MAApE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,cAAZ;AAA4BC,IAAAA,iBAA5B;AAA+CC,IAAAA;AAA/C,GAAoE;AACzF,QAAM;AAAEC,IAAAA;AAAF,MAAWR,QAAQ,EAAzB;AAEA,MAAIS,MAAM,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,CAAtC,CAAb;AACA,MAAIC,QAAJ,EAAcC,MAAd,EAAsBC,WAAtB;AAEA,MAAIR,MAAM,CAAC,CAAD,CAAV,EAAeM,QAAQ,GAAGN,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAX;AACf,MAAIJ,MAAM,CAAC,CAAD,CAAV,EAAeO,MAAM,GAAGP,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAT;AACf,MAAIJ,MAAM,CAAC,CAAD,CAAV,EAAeQ,WAAW,GAAGR,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAd;AAEf,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC+B,aAAD,EAAgBC,gBAAhB,IAAoChC,QAAQ,CAAC,KAAD,CAAlD,CAZyF,CAczF;;AACA,QAAMiC,UAAU,GAAG,MAAnB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCnC,QAAQ,CAAC,IAAD,CAAhD;;AACA,QAAMoC,eAAe,GAAIC,IAAD,IAAU;AAC9B,QAAIA,IAAI,CAACC,IAAL,GAAY,OAAhB,EAAyB;AACrBC,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACA;AACH;;AACDJ,IAAAA,eAAe,CAACE,IAAD,CAAf;AACH,GAND;;AAQAxB,EAAAA,QAAQ,CAAC,cAAD,CAAR;;AAEA,QAAM2B,cAAc,GAAG,MAAOC,CAAP,IAAa;AAEhC;AACA,QAAIC,UAAU,GAAG,EAAjB;;AACA,QAAIR,YAAJ,EAAiB;AACbS,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCV,YAAnC;AACAQ,MAAAA,UAAU,GAAG,MAAM/B,UAAU,CAACuB,YAAD,EAAe,OAAf,CAA7B;AACH,KAP+B,CAQhC;;;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYjB,UAAZ,EAVgC,CAWhC;;AACA,QAAIA,UAAU,CAACkB,IAAX,GAAkBC,MAAlB,IAA4B,CAAhC,EAAmC;AAC/BP,MAAAA,KAAK,CAAC,8BAAD,CAAL;AACAP,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA;AACH,KAhB+B,CAkBhC;;;AACA,QAAIe,QAAJ;;AACA,QAAIrB,WAAJ,EAAiB;AACbiB,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACA,UAAII,MAAM,GAAG;AACT,sBAAcN,UAAU,GAAGA,UAAH,GAAgB,IAD/B;AAET,gBAAQb,WAAW,CAACgB,IAAZ,EAFC;AAGT,gBAAQI,QAAQ,CAACvB,WAAD,CAHP;AAIT,eAAOuB,QAAQ,CAACxB,MAAD,CAJN;AAKT,iBAASE,UAAU,CAACkB,IAAX,EALA;AAMT,eAAO5B,IAAI,CAACiC,GAAL,CAAS5B,KAAT,CAAe,GAAf,EAAoB,CAApB;AANE,OAAb;AAQAqB,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACAD,MAAAA,QAAQ,GAAG,MAAMxC,wBAAwB,CAACyC,MAAD,CAAzC;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACH,KAbD,MAcK,IAAItB,MAAJ,EAAY;AACbkB,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAG,MAAAA,QAAQ,GAAG,MAAMzC,oBAAoB,CAAC;AAClC,eAAOW,IAAI,CAACiC,GAAL,CAAS5B,KAAT,CAAe,GAAf,EAAoB,CAApB,CAD2B;AAElC,eAAOE,QAF2B;AAGlC,eAAOyB,QAAQ,CAACxB,MAAD,CAHmB;AAIlC,iBAASE,UAAU,CAACkB,IAAX,EAJyB;AAKlC,gBAAQhB,WAAW,CAACgB,IAAZ,EAL0B;AAMlC,sBAAcH,UAAU,GAAGA,UAAH,GAAgB;AANN,OAAD,CAArC;AAQH,KAVI,MAWA;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EADC,CAED;;AACAG,MAAAA,QAAQ,GAAG,MAAM1C,sBAAsB,CAAC;AACpC,eAAOY,IAAI,CAACiC,GAAL,CAAS5B,KAAT,CAAe,GAAf,EAAoB,CAApB,CAD6B;AAEpC,eAAOE,QAF6B;AAGpC,iBAASG,UAAU,CAACkB,IAAX,EAH2B;AAIpC,gBAAQhB,WAAW,CAACgB,IAAZ,EAJ4B;AAKpC,sBAAcH,UAAU,GAAGA,UAAH,GAAgB;AALJ,OAAD,CAAvC;AAOH;;AACD,QAAIK,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzBrC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAC,MAAAA,iBAAiB,CAAC,CAACC,cAAF,CAAjB;AACH,KAHD,MAIK;AACDuB,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACH;;AACDP,IAAAA,gBAAgB,CAAC,KAAD,CAAhB,CA/DgC,CAgEhC;AACH,GAjED;;AAmEA,sBACI;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,aAAa,EAAEJ,aAAtB;AAAqC,MAAA,IAAI,EAAE,OAA3C;AAAoD,MAAA,IAAI,EAAE;AAA1D;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,QAAD;AAAU,MAAA,cAAc,EAAEE,cAA1B;AAA0C,MAAA,IAAI,EAAE,OAAhD;AAAyD,MAAA,IAAI,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,UAAD;AAAY,MAAA,WAAW,EAAE,WAAzB;AAAsC,MAAA,eAAe,EAAEG,UAAvD;AAAmE,MAAA,UAAU,EAAE,KAA/E;AAAsF,MAAA,eAAe,EAAEG,eAAvG;AAAwH,MAAA,eAAe,EAAED,eAAzI;AAA0J,MAAA,YAAY,EAAED;AAAxK;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,MAAD;AAAQ,MAAA,YAAY,EAAEM,cAAtB;AAAsC,MAAA,IAAI,EAAE,OAA5C;AAAqD,MAAA,QAAQ,EAAET;AAA/D;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAtGD;;GAAMnB,e;UACeH,Q;;;KADfG,e;AAuGN,eAAeA,eAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Input from '../../general-components/Input';\r\nimport Button from '../../general-components/Button';\r\nimport TextArea from '../../general-components/TextArea';\r\nimport { createCourseDiscussion } from '../../API/discussionApi'\r\nimport { createTestDiscussion } from '../../API/discussionApi'\r\nimport { createQuestionDiscussion } from \"../../API/questionApi\";\r\nimport userEvent from '@testing-library/user-event';\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\nimport UploadFile from '../../general-components/UploadFile';\r\nimport { uploadToS3 } from '../../s3-methods/uploadFile';\r\n\r\nconst PopupDiscussion = ({ setTitle, setIsPopupOpen, setContentUpdated, contentUpdated }) => {\r\n    const { user } = useAuth0();\r\n\r\n    let params = window.location.href.split('/').slice(3);\r\n    let courseID, examID, questionNum;\r\n\r\n    if (params[0]) courseID = params[0].split('=')[1];\r\n    if (params[1]) examID = params[1].split('=')[1];\r\n    if (params[2]) questionNum = params[2].split('=')[1];\r\n\r\n    const [inputTitle, setInputTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [isBTNdisabled, setIsBTNdisabled] = useState(false);\r\n\r\n    // file uploading code\r\n    const FILE_LIMIT = 500000;\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const handleFileInput = (file) => {\r\n        if (file.size > 5000000) {\r\n            alert(\"file uploading is limited up to 5MB\");\r\n            return;\r\n        }\r\n        setSelectedFile(file);\r\n    }\r\n\r\n    setTitle(\"צור דיון חדש\");\r\n\r\n    const postDiscussion = async (e) => {\r\n\r\n        // check if there is a attachment && upload it to S3 \r\n        let attachment = \"\";\r\n        if (selectedFile){\r\n            console.log(\"uploading to s3 disc\",selectedFile);\r\n            attachment = await uploadToS3(selectedFile, 'image')\r\n        }\r\n        // setIsBTNdisabled(true);\r\n        console.log(\"post\")\r\n        console.log(inputTitle)\r\n        // if the title is empty, don't let the user commit the discussion!\r\n        if (inputTitle.trim().length <= 0) {\r\n            alert(\"Discussion must have a title\");\r\n            setIsBTNdisabled(false);\r\n            return;\r\n        }\r\n\r\n        // check what type of discussion the user wants to post {course, exam, question}\r\n        let response;\r\n        if (questionNum) {\r\n            console.log('pushing a discussion to questions');\r\n            let object = {\r\n                \"attachment\": attachment ? attachment : null,\r\n                \"body\": description.trim(),\r\n                \"qnum\": parseInt(questionNum),\r\n                \"tid\": parseInt(examID),\r\n                \"title\": inputTitle.trim(),\r\n                \"uid\": user.sub.split(\"|\")[1],\r\n            };\r\n            console.log(object);\r\n            response = await createQuestionDiscussion(object);\r\n            console.log(response);\r\n        }\r\n        else if (examID) {\r\n            console.log('pushing a discussion to exams');\r\n            response = await createTestDiscussion({\r\n                \"uid\": user.sub.split(\"|\")[1],\r\n                \"cid\": courseID,\r\n                \"tid\": parseInt(examID),\r\n                \"title\": inputTitle.trim(),\r\n                \"body\": description.trim(),\r\n                \"attachment\": attachment ? attachment : null\r\n            });\r\n        }\r\n        else {\r\n            console.log('pushing a discussion to courses');\r\n            // console.log('courseID=',courseID);\r\n            response = await createCourseDiscussion({\r\n                \"uid\": user.sub.split(\"|\")[1],\r\n                \"cid\": courseID,\r\n                \"title\": inputTitle.trim(),\r\n                \"body\": description.trim(),\r\n                \"attachment\": attachment ? attachment : null\r\n            });\r\n        }\r\n        if (response.status === 200) {\r\n            setIsPopupOpen(false);\r\n            setContentUpdated(!contentUpdated);\r\n        }\r\n        else {\r\n            alert('קרתה תקלה. אנא נסה בשנית')\r\n        }\r\n        setIsBTNdisabled(false);\r\n        // console.log(response);\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex justify-between flex-col \">\r\n            <Input setInputValue={setInputTitle} text={\"כותרת\"} type={\"text\"} />\r\n            <TextArea setDescription={setDescription} text={\"תיאור\"} rows={6} />\r\n            <UploadFile uploadTitle={\"צרף תמונה\"} uploadFileLimit={FILE_LIMIT} uploadType={\"PNG\"} handleFileInput={handleFileInput} setSelectedFile={setSelectedFile} selectedFile={selectedFile} />\r\n            <Button clickHandler={postDiscussion} text={\"אישור\"} disabled={isBTNdisabled} />\r\n        </div>\r\n    )\r\n}\r\nexport default PopupDiscussion;\r\n"]},"metadata":{},"sourceType":"module"}