{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avikef\\\\Desktop\\\\New folder (12)\\\\tauoverflow-client\\\\src\\\\components\\\\discussions\\\\Discussions.js\",\n    _s = $RefreshSig$();\n\nimport Discussion from \"./Discussion\";\nimport DiscussionsList from './DiscussionsList';\nimport { useState, useEffect } from \"react\";\nimport { getAllCourseDiscussions } from \"../../API/courseApi\";\nimport { getAllTestDiscussions } from '../../API/testApi';\nimport { getAllQuestionDiscussions } from '../../API/questionApi';\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Discussions = _ref => {\n  _s();\n\n  let {\n    type,\n    contentUpdated\n  } = _ref;\n  const [selectedDiscussion, setSelectedDiscussion] = useState(null);\n  const [discussions, setDiscussions] = useState([]);\n  const IDs = useParams();\n  useEffect(() => {\n    (async () => {\n      try {\n        let response,\n            allDiscussions = [];\n\n        switch (type) {\n          case 'course':\n            // console.log('fetching all courses discussions');\n            response = await getAllCourseDiscussions();\n            allDiscussions = response.data.data.allCourseDiscussions.nodes.filter(discussion => IDs.courseID === discussion.cid.trim());\n            break;\n\n          case 'exam':\n            // console.log('fetching all exams discussions');\n            response = await getAllTestDiscussions();\n            allDiscussions = response.data.data.allTestDiscussions.nodes.filter(exam => exam.cid.trim() === IDs.courseID && exam.tid === parseInt(IDs.examID));\n            break;\n\n          case 'question':\n            // console.log('fetching all questions discussions');\n            response = await getAllQuestionDiscussions();\n            allDiscussions = response.data.data.allQuestionDiscussions.nodes;\n            break;\n\n          default:\n            break;\n        }\n\n        setDiscussions(allDiscussions);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [contentUpdated]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen-1/2 md:flex-row p-3 mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex sm:flex-auto bg-purple-50 m-2 md:w-1 shadow dark:bg-gray-800 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(DiscussionsList, {\n        type: type,\n        discussions: discussions,\n        setSelectedDiscussion: setSelectedDiscussion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), selectedDiscussion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex bg-purple-50 sm:flex-auto dark:bg-gray-800 m-2 md:w-80 rounded-lg shadow\",\n      children: /*#__PURE__*/_jsxDEV(Discussion, {\n        type: type,\n        selectedDiscussion: selectedDiscussion,\n        setSelectedDiscussion: setSelectedDiscussion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Discussions, \"+l12V51LmVTIJ0T99jmFRUb1Ncc=\", false, function () {\n  return [useParams];\n});\n\n_c = Discussions;\nexport default Discussions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Discussions\");","map":{"version":3,"sources":["C:/Users/avikef/Desktop/New folder (12)/tauoverflow-client/src/components/discussions/Discussions.js"],"names":["Discussion","DiscussionsList","useState","useEffect","getAllCourseDiscussions","getAllTestDiscussions","getAllQuestionDiscussions","useParams","Discussions","type","contentUpdated","selectedDiscussion","setSelectedDiscussion","discussions","setDiscussions","IDs","response","allDiscussions","data","allCourseDiscussions","nodes","filter","discussion","courseID","cid","trim","allTestDiscussions","exam","tid","parseInt","examID","allQuestionDiscussions","error","console","log"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,SAASC,yBAAT,QAA0C,uBAA1C;AACA,SAASC,SAAT,QAA0B,cAA1B;;;AAEA,MAAMC,WAAW,GAAG,QAA8B;AAAA;;AAAA,MAA7B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAA6B;AAC9C,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMa,GAAG,GAAGR,SAAS,EAArB;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACT,UAAI;AACA,YAAIa,QAAJ;AAAA,YAAcC,cAAc,GAAG,EAA/B;;AACA,gBAAQR,IAAR;AACI,eAAK,QAAL;AACI;AACAO,YAAAA,QAAQ,GAAG,MAAMZ,uBAAuB,EAAxC;AACAa,YAAAA,cAAc,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,oBAAnB,CAAwCC,KAAxC,CAA8CC,MAA9C,CAAqDC,UAAU,IAC5EP,GAAG,CAACQ,QAAJ,KAAiBD,UAAU,CAACE,GAAX,CAAeC,IAAf,EADJ,CAAjB;AAEA;;AAEJ,eAAK,MAAL;AACI;AACAT,YAAAA,QAAQ,GAAG,MAAMX,qBAAqB,EAAtC;AACAY,YAAAA,cAAc,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBQ,kBAAnB,CAAsCN,KAAtC,CAA4CC,MAA5C,CAAmDM,IAAI,IACpEA,IAAI,CAACH,GAAL,CAASC,IAAT,OAAoBV,GAAG,CAACQ,QAAxB,IAAoCI,IAAI,CAACC,GAAL,KAAaC,QAAQ,CAACd,GAAG,CAACe,MAAL,CAD5C,CAAjB;AAEA;;AAEJ,eAAK,UAAL;AACI;AACAd,YAAAA,QAAQ,GAAG,MAAMV,yBAAyB,EAA1C;AACAW,YAAAA,cAAc,GAAGD,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBa,sBAAnB,CAA0CX,KAA3D;AACA;;AACJ;AACI;AArBR;;AAuBAN,QAAAA,cAAc,CAACG,cAAD,CAAd;AACH,OA1BD,CA2BA,OAAOe,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,KA/BD;AAgCH,GAjCQ,EAiCN,CAACtB,cAAD,CAjCM,CAAT;AAmCA,sBACI;AAAK,IAAA,SAAS,EAAC,iDAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,8EAAf;AAAA,6BACI,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAED,IAAvB;AAA6B,QAAA,WAAW,EAAEI,WAA1C;AAAuD,QAAA,qBAAqB,EAAED;AAA9E;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKD,kBAAkB,iBAAI;AAAK,MAAA,SAAS,EAAC,+EAAf;AAAA,6BACnB,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEF,IAAlB;AAAwB,QAAA,kBAAkB,EAAEE,kBAA5C;AAAgE,QAAA,qBAAqB,EAAEC;AAAvF;AAAA;AAAA;AAAA;AAAA;AADmB;AAAA;AAAA;AAAA;AAAA,YAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAlDD;;GAAMJ,W;UAGUD,S;;;KAHVC,W;AAmDN,eAAeA,WAAf","sourcesContent":["import Discussion from \"./Discussion\";\nimport DiscussionsList from './DiscussionsList';\nimport { useState, useEffect } from \"react\";\nimport { getAllCourseDiscussions } from \"../../API/courseApi\";\nimport { getAllTestDiscussions } from '../../API/testApi';\nimport { getAllQuestionDiscussions } from '../../API/questionApi';\nimport { useParams } from \"react-router\";\n\nconst Discussions = ({ type, contentUpdated }) => {\n    const [selectedDiscussion, setSelectedDiscussion] = useState(null);\n    const [discussions, setDiscussions] = useState([]);\n    const IDs = useParams();\n\n    useEffect(() => {\n        (async () => {\n            try {\n                let response, allDiscussions = [];\n                switch (type) {\n                    case 'course':\n                        // console.log('fetching all courses discussions');\n                        response = await getAllCourseDiscussions();\n                        allDiscussions = response.data.data.allCourseDiscussions.nodes.filter(discussion => \n                            IDs.courseID === discussion.cid.trim());\n                        break;\n\n                    case 'exam':\n                        // console.log('fetching all exams discussions');\n                        response = await getAllTestDiscussions();\n                        allDiscussions = response.data.data.allTestDiscussions.nodes.filter(exam => \n                            exam.cid.trim() === IDs.courseID && exam.tid === parseInt(IDs.examID));\n                        break;\n\n                    case 'question':\n                        // console.log('fetching all questions discussions');\n                        response = await getAllQuestionDiscussions();\n                        allDiscussions = response.data.data.allQuestionDiscussions.nodes;\n                        break;\n                    default:\n                        break;\n                }\n                setDiscussions(allDiscussions);\n            }\n            catch (error) {\n                console.log(error);\n            }\n        })()\n    }, [contentUpdated])\n\n    return (\n        <div className=\"flex flex-col h-screen-1/2 md:flex-row p-3 mt-5\">\n            <div className=\"flex sm:flex-auto bg-purple-50 m-2 md:w-1 shadow dark:bg-gray-800 rounded-lg\">\n                <DiscussionsList type={type} discussions={discussions} setSelectedDiscussion={setSelectedDiscussion} />\n            </div>\n            {selectedDiscussion && <div className=\"flex bg-purple-50 sm:flex-auto dark:bg-gray-800 m-2 md:w-80 rounded-lg shadow\">\n                <Discussion type={type} selectedDiscussion={selectedDiscussion} setSelectedDiscussion={setSelectedDiscussion} />\n            </div>}\n        </div>\n    )\n}\nexport default Discussions"]},"metadata":{},"sourceType":"module"}